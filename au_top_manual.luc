module au_top_auto (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond;
    edge_detector button_detector(#RISE(1), #FALL(0));
    .rst(rst) {
      fsm manualAlu = {GETA, GETB, GETALUFN, RETURN};
      sixteen_bit_alu sixteenbitalu;
      dff a[16]; //store a input from io_dip
      dff b[16]; //store b input from io_dip
      dff alufn[6]; //store alufn input from io_dip
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;
    
    usb_tx = usb_rx;        // loop serial port
     
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;
    
    buttoncond.in = io_button[4]; // right button used to indicate done with setting io_dips
    button_detector.in = buttoncond.out;
    a.d = a.q;
    b.d = b.q;
    alufn.d = alufn.q;
    sixteenbitalu.a = a.q;
    sixteenbitalu.b = b.q;
    sixteenbitalu.alufn = alufn.q;
    
    case (manualAlu.q) {
      manualAlu.GETA:
        a.d = $flatten(io_dip[1:0]);
        if (button_detector.out) {
          manualAlu.d = manualAlu.GETB;
        }
        
      manualAlu.GETB:
        b.d = $flatten(io_dip[1:0]);
        if (button_detector.out) {
          manualAlu.d = manualAlu.GETALUFN;
        }
        
      manualAlu.GETALUFN:
        alufn.d = io_dip[0][5:0];
        if (button_detector.out) {
          manualAlu.d = manualAlu.RETURN;
        }
        
      manualAlu.RETURN:
        io_led[1:0] = $build(sixteenbitalu.alu, 2);
      
    }    
  }
}