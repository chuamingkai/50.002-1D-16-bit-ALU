
module multtester (
    input clk,  // clock 
    input rst,  // reset
    input start, //initiate tester
    output out[16], // output to flash on fpga; connect to FPGA led
    output error //show pass or fail
    //output io_seg[8],
    //output io_sel[4],
    //output opcode_led[6]
  ) {
  .clk(clk), .rst(rst)  {
    fsm multtesterstate = {START, MULTZERO, MULTONE, MULTNEG, MULTPOS, PASSALL, FAIL}; 
    dff counter[25];
  }
    
  sixteen_bit_alu sixteenbitalu;
  const NEGA = b1011110000111011;
  const NEGB = b1111001100111000; 
  const POSA = b0111100001110110 ;
  const POSB = b0000111000000001 ;
  	         
  always {
    counter.d = counter.q + 1;
    sixteenbitalu.alufn=b000001;
    sixteenbitalu.a=0;
    sixteenbitalu.b=0;
    error = 0;
    out = 0;
    case (multtesterstate.q) {//read state
    
      multtesterstate.START:
        if (start == 1) {
	  counter.d = 0;
          multtesterstate.d = multtesterstate.MULTZERO;
        }
        
      //first test
      multtesterstate.MULTZERO:
        sixteenbitalu.a = NEGA;
        sixteenbitalu.b = 16b0;
        if (counter.q[24:23] == 0) {
          out = SUBA;
        } else if (counter.q[24:23] == 1) {
          out = SUBB; 
        } else if (counter.q[24:23] == 2) {
          out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if(sixteenbitalu.alu == b0000000000000000 ) {
              counter.d = 0; // reset counter for next test
              multtesterstate.d = multtesterstate.MULTONE; //next state if the test is passed 
            } else {
              multtesterstate.d = multtesterstate.FAIL;
            } 
        }
          
      multtesterstate.MULTONE:
        sixteenbitalu.a = POSA;
        sixteenbitalu.b = b0000000000000001;
        if (counter.q[24:23] == 0) {
            out = SUBC;
        } else if (counter.q[24:23] == 1) {
            out = SUBD; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == b0111100001110110) {
              counter.d = 0; // reset counter for next test
              multtesterstate.d = multtesterstate.MULTNEG;
            } else {
              multtesterstate.d = multtesterstate.FAIL;
            } 
        }
	
	multtesterstate.MULTNEG:
        sixteenbitalu.a = NEGA;
        sixteenbitalu.b = NEGB;
        if (counter.q[24:23] == 0) {
            out = SUBC;
        } else if (counter.q[24:23] == 1) {
            out = SUBD; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == b0010110111101000) {
              counter.d = 0; // reset counter for next test
              multtesterstate.d = multtesterstate.MULTPOS;
            } else {
              multtesterstate.d = multtesterstate.FAIL;
            } 
        }
      
      
      multtesterstate.MULTPOS:
        sixteenbitalu.a = POSA;
        sixteenbitalu.b = POSB;
        if (counter.q[24:23] == 0) {
            out = SUBC;
        } else if (counter.q[24:23] == 1) {
            out = SUBD; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == b1110110001110110) {
              counter.d = 0; // reset counter for next test
              multtesterstate.d = multtesterstate.PASSALL;
            } else {
              multtesterstate.d = multtesterstate.FAIL;
            } 
        }
      
      multtesterstate.PASSALL:
        error = 0;
      
      multtesterstate.FAIL:
        error = 1;      		
	  }

}
