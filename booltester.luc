module booltester (
    input clk,  // clock 
    input rst,  // reset
    input start, //initiate tester
    output out[16], // output to flash on fpga; connect to FPGA led
    output error //show pass or fail
    //output io_seg[8],
    //output io_sel[4],
    //output opcode_led[6]
  ) {
  .clk(clk), .rst(rst)  {
    fsm boolteststate = {START, AND, OR, A, XOR,FAIL,PASSALL}; //able to test for 00,01, 10 and 11 combinations for each test since operations are bitwise
    dff counter[25];
    
  }
  
  sixteen_bit_alu sixteenbitalu;
    
  
  const BOOLA = b0000111111111111;
  const BOOLB = b0000000000001111;

    
  always {
    counter.d = counter.q + 1;
    sixteenbitalu.alufn=b011000;//start with and
    sixteenbitalu.a=0;
    sixteenbitalu.b=0;
    error = 0;
    out = 0;
    case (boolteststate.q) {//read state
    
      boolteststate.START:
        if (start == 1) {
          counter.d = 0; // reset counter
          boolteststate.d = boolteststate.AND;
        }
        
      //first test
      boolteststate.AND:
        sixteenbitalu.a = BOOLA;
        sixteenbitalu.b = BOOLB;
        if (counter.q[24:23] == 0) {
          out = BOOLA;
        } else if (counter.q[24:23] == 1) {
          out = BOOLB; 
        } else if (counter.q[24:23] == 2) {
          out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if(sixteenbitalu.alu == b0000000000001111) {
              counter.d = 0; // reset counter for next test
              boolteststate.d = boolteststate.OR; //next state if the test is passed 
            } else {
              boolteststate.d = boolteststate.FAIL;
            } 
        }
          
      boolteststate.OR:
        sixteenbitalu.a = BOOLA;
        sixteenbitalu.b = BOOLB;
        sixteenbitalu.alufn=b011110;
        if (counter.q[24:23] == 0) {
            out = BOOLA;
        } else if (counter.q[24:23] == 1) {
            out = BOOLB; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == b0000111111111111 ){
              counter.d = 0; // reset counter for next test
              boolteststate.d = boolteststate.A;
            } else {
              boolteststate.d = boolteststate.FAIL;
            } 
        }
	
	 boolteststate.A:
        sixteenbitalu.a = BOOLA;
        sixteenbitalu.b = BOOLB;
        sixteenbitalu.alufn=b011010;
        if (counter.q[24:23] == 0) {
            out = BOOLA;
        } else if (counter.q[24:23] == 1) {
            out = BOOLB; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == b0000111111111111){
              counter.d = 0; // reset counter for next test
              boolteststate.d = boolteststate.XOR;
            } else {
              boolteststate.d = boolteststate.FAIL;
            } 
        }
	
	 boolteststate.XOR:
        sixteenbitalu.a = BOOLA;
        sixteenbitalu.b = BOOLB;
        sixteenbitalu.alufn=b010110;
        if (counter.q[24:23] == 0) {
            out = BOOLA;
        } else if (counter.q[24:23] == 1) {
            out = BOOLB; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu ==   b0000111111110000 ){
              counter.d = 0; // reset counter for next test
              boolteststate.d = boolteststate.PASSALL;
            } else {
              boolteststate.d = boolteststate.FAIL;
            } 
        }
      
      boolteststate.PASSALL:
        error = 0;
      
      boolteststate.FAIL:
        error = 1;      		
	  }

}
