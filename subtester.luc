module subtester (
    input clk,  // clock 
    input rst,  // reset
    input start, //initiate tester
    output out[16], // output to flash on fpga; connect to FPGA led
    output error, //show pass or fail
    output cmplt
    //output io_seg[8],
    //output io_sel[4],
    //output opcode_led[6]
  ) {
  .clk(clk), .rst(rst)  {
    fsm subtesterstate = {START, SUBOVER, SUBNO, SUBZ, PASSALL, FAIL}; 
    dff counter[30];
    sixteen_bit_alu sixteenbitalu;
  }
    

  const SUBA = b1000000000000000;
  const SUBB = b0111111111111111; // 2's complement b1000000000000001
  const SUBC = b0000000000000010;
  const SUBD = b0000000000000101; //2's complement  b1111111111111011
  	         
  always {
    counter.d = counter.q + 1;
    sixteenbitalu.alufn=b000001;
    sixteenbitalu.a=0;
    sixteenbitalu.b=0;
    error = 0;
    cmplt = 0;
    out = 0;
    case (subtesterstate.q) {//read state
    
      subtesterstate.START:
        if (start == 1) {
	  counter.d = 0;
          subtesterstate.d = subtesterstate.SUBOVER;
        }
        
      //first test
      subtesterstate.SUBOVER:
        sixteenbitalu.a = SUBA;
        sixteenbitalu.b = SUBB;
        if (counter.q[29:28] == 0) {
          out = SUBA;
        } else if (counter.q[29:28] == 1) {
          out = SUBB; 
        } else if (counter.q[29:28] == 2) {
          out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if(sixteenbitalu.alu == b0000000000000001 && sixteenbitalu.v==1 && sixteenbitalu.z==0 && sixteenbitalu.n==0) {
              counter.d = 0; // reset counter for next test
              subtesterstate.d = subtesterstate.SUBNO; //next state if the test is passed 
            } else {
              subtesterstate.d = subtesterstate.FAIL;
            } 
        }
          
      subtesterstate.SUBNO:
        sixteenbitalu.a = SUBC;
        sixteenbitalu.b = SUBD;
        if (counter.q[29:28] == 0) {
            out = SUBC;
        } else if (counter.q[29:28] == 1) {
            out = SUBD; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b1111111111111111 && sixteenbitalu.v == 0 && sixteenbitalu.z == 0 && sixteenbitalu.n == 1) {
              counter.d = 0; // reset counter for next test
              subtesterstate.d = subtesterstate.SUBZ;
            } else {
              subtesterstate.d = subtesterstate.FAIL;
            } 
        }
      
      subtesterstate.SUBZ:
        sixteenbitalu.a = SUBC;
        sixteenbitalu.b = SUBC;
        if (counter.q[29:28] == 0) {
            out = SUBC;
        } else if (counter.q[29:28] == 1) {
            out = SUBC; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b0000000000000000 && sixteenbitalu.v == 0 && sixteenbitalu.z == 1 && sixteenbitalu.n == 0) {
              counter.d = 0; // reset counter for next test
              subtesterstate.d = subtesterstate.PASSALL;
            } else {
              subtesterstate.d = subtesterstate.FAIL;
            } 
        }
      
      
      subtesterstate.PASSALL:
        cmplt = 1;
        error = 0;
      
      subtesterstate.FAIL:
        cmplt = 1;
        error = 1;      		
	  }

}
