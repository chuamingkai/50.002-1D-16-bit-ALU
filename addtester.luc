module addtester (
    input clk,  // clock 
    input rst,  // reset
    input start, //initiate tester
    output out[16], // output to flash on fpga; connect to FPGA led
    output error, //show pass or fail
    output cmplt
  ) {
  
  .clk(clk), .rst(rst)  {
    fsm addteststate = {START, ADDOVER, ADDNO, PASSALL, FAIL}; //call the states by name.state
    dff counter[30];
    sixteen_bit_alu sixteenbitalu;
    
  }
  
  const ADDA = b0111111111111111;
  const ADDB = b0000000000000001;
  const ADDC = b0000000000000010;
  const ADDD = b0000000000000101;
    
  always {
    counter.d = counter.q + 1;
    sixteenbitalu.alufn=6b0;
    sixteenbitalu.a=0;
    sixteenbitalu.b=0;
    error = 0;
    cmplt = 0;
    out = 0;
    case (addteststate.q) {//read state
    
      addteststate.START:
        if (start == 1) {
	  counter.d = 0; // reset counter
          addteststate.d = addteststate.ADDOVER;
        }
        
      //first test
      addteststate.ADDOVER:
        sixteenbitalu.a = ADDA;
        sixteenbitalu.b = ADDB;
        if (counter.q[29:28] == 0) {
          out = ADDA;
        } else if (counter.q[29:28] == 1) {
          out = ADDB; 
        } else if (counter.q[29:28] == 2) {
          out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if(sixteenbitalu.alu == b1000000000000000 && sixteenbitalu.v==1 && sixteenbitalu.z==0 && sixteenbitalu.n==1) {
              counter.d = 0; // reset counter for next test
              addteststate.d = addteststate.ADDNO; //next state if the test is passed 
            } else {
              addteststate.d = addteststate.FAIL;
            } 
        }
          
      addteststate.ADDNO:
        sixteenbitalu.a = ADDC;
        sixteenbitalu.b = ADDD;
        if (counter.q[29:28] == 0) {
            out = ADDC;
        } else if (counter.q[29:28] == 1) {
            out = ADDD; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b0000000000000111 && sixteenbitalu.v == 0 && sixteenbitalu.z == 0 && sixteenbitalu.n == 0) {
              counter.d = 0; // reset counter for next test
              addteststate.d = addteststate.PASSALL;
            } else {
              addteststate.d = addteststate.FAIL;
            } 
        }
      
      addteststate.PASSALL:
        cmplt = 1;
        error = 0;
      
      addteststate.FAIL:
        cmplt = 1;
        error = 1;      		
	  }
        
          
      
	  }
}
