module shifttester (
    input clk,  // clock 
    input rst,  // reset
    input start, //initiate tester
    output out[16], // output to flash on fpga; connect to FPGA led
    output error, //show pass or fail
    output cmplt
  ) {
  .clk(clk), .rst(rst)  {
    fsm shifttesterstate = {START, SR8, SR1, SL15, SSR4, SSR10, PASSALL, FAIL}; 
    dff counter[30];
    sixteen_bit_alu sixteenbitalu; 
  }    

  const B1 = b0000000000000001;
  const B8 = b0000000000001000; 
  const B15 =b0000000000001111;
  const B4 = b0000000000000100; 
  const B10= b0000000000001010;
  const SHIFTA= b1000111100001111;
  const SHIFTB= b1010101010111111;
  const SHIFTC= b0000111100001111;
  const SHIFTD= b1111001100110000;
  
  const SHR= b100001;
  const SHL= b100000;
  const SRA= b100011;
  	         
  always {
    counter.d = counter.q + 1;
    sixteenbitalu.alufn=SHR;
    sixteenbitalu.a=0;
    sixteenbitalu.b=0;
    error = 0;
    cmplt = 0;
    out = 0;
    case (shifttesterstate.q) {//read state
    
      shifttesterstate.START:
        if (start == 1) {
          counter.d = 0;
          shifttesterstate.d = shifttesterstate.SR8;
        }
        
      //first test
      shifttesterstate.SR8:
        sixteenbitalu.a = SHIFTA;
        sixteenbitalu.b = B8;
        if (counter.q[29:28] == 0) {
          out = SHIFTA;
        } else if (counter.q[29:28] == 1) {
          out = B8; 
        } else if (counter.q[29:28] == 2) {
          out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if(sixteenbitalu.alu == b0000000010001111) {
              counter.d = 0; // reset counter for next test
              shifttesterstate.d = shifttesterstate.SR1; //next state if the test is passed 
            } else {
              shifttesterstate.d = shifttesterstate.FAIL;
            } 
        }
          
      shifttesterstate.SR1:
        sixteenbitalu.a = SHIFTA;
        sixteenbitalu.b = B1;
        if (counter.q[29:28] == 0) {
            out = SHIFTA;
        } else if (counter.q[29:28] == 1) {
            out = B1; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b0100011110000111  ) {
              counter.d = 0; // reset counter for next test
              shifttesterstate.d = shifttesterstate.SL15;
            } else {
              shifttesterstate.d = shifttesterstate.FAIL;
            } 
        }
      
      shifttesterstate.SL15:
        sixteenbitalu.a = SHIFTB;
        sixteenbitalu.b = B15;
    	sixteenbitalu.alufn=SHL;
	
        if (counter.q[29:28] == 0) {
            out = SHIFTB;
        } else if (counter.q[29:28] == 1) {
            out = B15; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b1000000000000000 ) {
              counter.d = 0; // reset counter for next test
              shifttesterstate.d = shifttesterstate.SSR4;
            } else {
              shifttesterstate.d = shifttesterstate.FAIL;
            } 
        }
	
	shifttesterstate.SSR4:
        sixteenbitalu.a = SHIFTC;
        sixteenbitalu.b = B4;
	sixteenbitalu.alufn=SRA;
        if (counter.q[29:28] == 0) {
            out = SHIFTC;
        } else if (counter.q[29:28] == 1) {
            out = B4; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b0000000011110000  ) {
              counter.d = 0; // reset counter for next test
              shifttesterstate.d = shifttesterstate.SSR10;
            } else {
              shifttesterstate.d = shifttesterstate.FAIL;
            } 
        }
	
       shifttesterstate.SSR10:
        sixteenbitalu.a = SHIFTD;
        sixteenbitalu.b = B10;
	sixteenbitalu.alufn=SRA;
        if (counter.q[29:28] == 0) {
            out = SHIFTD;
        } else if (counter.q[29:28] == 1) {
            out = B10; 
        } else if (counter.q[29:28] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[29:28] == 3) {
            if (sixteenbitalu.alu == b1111111111111100  ) {
              counter.d = 0; // reset counter for next test
              shifttesterstate.d = shifttesterstate.PASSALL;
            } else {
              shifttesterstate.d = shifttesterstate.FAIL;
            } 
        }
      
      shifttesterstate.PASSALL:
        cmplt = 1;
        error = 0;
      
      shifttesterstate.FAIL:
        cmplt = 1;
        error = 1;      		
	  }

}
