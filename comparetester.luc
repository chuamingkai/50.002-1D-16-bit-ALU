module comparetester (
    input clk,  // clock 
    input rst,  // reset
    input start, //initiate tester
    output out[16], // output to flash on fpga; connect to FPGA led
    output error //show pass or fail
    //output io_seg[8],
    //output io_sel[4],
    //output opcode_led[6]
  ) {
  .clk(clk), .rst(rst)  {
    fsm comparetesterstate = {START, EQUALTRUE, EQUALFALSE, LESSOVER, LESSNO, LESSFALSE, LESSCOMPARE, LESSTHANOREQUAL,LESSTHANOREQUALCOMPARE,PASSALL, FAIL}; //call the states by name.state
    dff counter[25];
  }
    
  sixteen_bit_alu sixteenbitalu;
  
  const COMPAREA= b1000000000000000;
  const COMPAREB= b1000000000000001;
  const COMPAREC= b1111111111111101;
  const COMPARED= b1111111111111111;
  const COMPAREE= b0000000000000001; 
  const COMPAREF= b0000000000000100;
   
  
    
  always {
    counter.d = counter.q + 1;
    sixteenbitalu.alufn=b110011;
    sixteenbitalu.a=0;
    sixteenbitalu.b=0;
    //compareunit.z=0; //compareunit values are connected to the adder 
    //compareunit.v=0;
    //compareunit.n=0;
    error = 0;
    out = 0;
    case (comparetesterstate.q) {//read state
    
      comparetesterstate.START:
        if (start == 1) {
	  counter.d = 0;
          comparetesterstate.d = comparetesterstate.EQUALTRUE;
        }
        
      //first test
      addteststate.EQUALTRUE:
        sixteenbitalu.a = COMPAREA;
        sixteenbitalu.b = COMPAREA;
	//compareunit.z == 1;
        if (counter.q[24:23] == 0) {
            out = COMPAREA;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREA; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000001) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.PASSALL;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
          
      comparetesterstate.EQUALFALSE:
        sixteenbitalu.a = COMPAREA;
        sixteenbitalu.b = COMPAREB;
	//compareunit.z =0;
        if (counter.q[24:23] == 0) {
            out = COMPAREA;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREB; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000000) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.LESSOVER;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	//more negative number subtract negative number 1111111111111101-1111111111111111 =0000000000000010
	comparetesterstate.LESSOVER:
        sixteenbitalu.a = COMPAREC;
        sixteenbitalu.b = COMPARED;
	//compareunit.v = 1;
	//compareunit.n = 0;
	sixteenbitalu.alufn=b110101;
        if (counter.q[24:23] == 0) {
            out = COMPAREC;
        } else if (counter.q[24:23] == 1) {
            out = COMPARED; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000001) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.LESSNO;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	
	comparetesterstate.LESSNO:
        sixteenbitalu.a = COMPAREE;
        sixteenbitalu.b = COMPAREF;
	//compareunit.v =0;
	//compareunit.n =1;
	sixteenbitalu.alufn=b110101;
        if (counter.q[24:23] == 0) {
            out = COMPAREE;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREF; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000001) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.LESSFALSE;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	
	comparetesterstate.LESSFALSE:
        sixteenbitalu.a = COMPAREF;
        sixteenbitalu.b = COMPAREE;
	//compareunit.v =0;
	//compareunit.n =0;
	sixteenbitalu.alufn=b110101;
        if (counter.q[24:23] == 0) {
            out = COMPAREF;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREE; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000000) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.LESSCOMPARE;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	
	comparetesterstate.LESSCOMPARE:
        sixteenbitalu.a = COMPAREF;
        sixteenbitalu.b = COMPAREF;
	//compareunit.v =0;
	//compareunit.n =0;
	sixteenbitalu.alufn=b110101;
        if (counter.q[24:23] == 0) {
            out = COMPAREF;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREF; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000000 && sixteenbitalu.v == 0 && sixteenbitalu.n == 0) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.LESSTHANOREQUAL;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	
	
	comparetesterstate.LESSTHANOREQUAL:
        sixteenbitalu.a = COMPAREE;
        sixteenbitalu.b = COMPAREF;
	//compareunit.n =1;
	//compareunit.v =0;
	//compareunit.z =0;
	sixteenbitalu.alufn=b110111;
        if (counter.q[24:23] == 0) {
            out = COMPAREE;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREF; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000001) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.LESSTHANOREQUALCOMPARE;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	
	
	comparetesterstate.LESSTHANOREQUALCOMPARE:
        sixteenbitalu.a = COMPAREF;
        sixteenbitalu.b = COMPAREF;
	//compareunit.v =0;
	//compareunit.n =0;
	//compareunit.z =1;
	sixteenbitalu.alufn=b110111;
        if (counter.q[24:23] == 0) {
            out = COMPAREF;
        } else if (counter.q[24:23] == 1) {
            out = COMPAREF; 
        } else if (counter.q[24:23] == 2) {
            out = sixteenbitalu.alu;
        } else if (counter.q[24:23] == 3) {
            if (sixteenbitalu.alu == 0000000000000000 ) {
              counter.d = 0; // reset counter for next test
              comparetesterstate.d = comparetesterstate.PASSALL;
            } else {
              comparetesterstate.d = comparetesterstate.FAIL;
            } 
        }
	
	
	
      
      comparetesterstate.PASSALL:
        error = 0;
      
      comparetesterstate.FAIL:
        error = 1;      		
	  }

}
