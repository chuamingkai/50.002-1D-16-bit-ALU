module booleantester (
    input clk,
    input rst,
    output out[16],
    output error
  ) {
    dff counter[6](#INIT(0),.clk(clk), .rst(rst));
    fsm booleanstate(.clk(clk), .rst(rst)) = {START, AND, OR, A, XOR,FAIL,PASSALL};
    boolean_unit sixteenbitboolean;
    adder sixteenbitadder;
    
    const INPUTA = b0000000000000000;
    const INPUTB = b1111111111111111;
    
    always {
    sixteenbitadder.y = b010110;
    sixteenbitadder.x = counter.q;
    counter.d = sixteenbitadder.sum;
    sixteenbitboolean.alufn = sixteenbitadder.sum;
    sixteenbitadder.alufn = b000000;
    sixteenbitboolean.a = INPUTA;
    sixteenbitboolean.b = INPUTB;
    error = 0;
    out = 0;
    case(booleanstate.q){
      booleanstate.START:
      sixteenbitadder.y = b010110;
      booleanstate.d = booleanstate.XOR;
      booleanstate.XOR:
        if(sixteenbitboolean.boolean == b0000000000000000){
          sixteenbitadder.y = b000010;
          booleanstate.d = booleanstate.AND;
        }else{
          booleanstate.d = booleanstate.FAIL;
          error = 1;
        }
      booleanstate.AND:
      if(sixteenbitboolean.boolean == b0000000000000000){
          sixteenbitadder.y = b000010;
          booleanstate.d = booleanstate.A;
        }else{
          booleanstate.d = booleanstate.FAIL;
          error = 1;
        }
      booleanstate.A:
      if(sixteenbitboolean.boolean == b0000000000000000){
         sixteenbitadder.y = b000100;
          booleanstate.d = booleanstate.OR;
        }else{
          booleanstate.d = booleanstate.FAIL;
          error = 1;
        }
      booleanstate.OR:
      if(sixteenbitboolean.boolean == b1111111111111111){
          booleanstate.d = booleanstate.PASSALL;
          out = 1;
        }else{
          booleanstate.d = booleanstate.FAIL;
          error = 1;
        }
    } 
  }
}
  
  
 
  
  
  

  
